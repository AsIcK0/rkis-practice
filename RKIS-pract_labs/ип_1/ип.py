import telebot
from telebot import types
import random
import json
import os
bot = telebot.TeleBot("7877660982:AAEpHiwXd--QNn-Ca02YrK5MyTK7U61BgiM")
user_data = {}
game_facts = [
    "–ò–≥—Ä–∞ '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞' –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –ö–∏—Ç–∞–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∞ –¥–∏–Ω–∞—Å—Ç–∏–∏ –•–∞–Ω—å (206 –¥–æ –Ω.—ç. - 220 –Ω.—ç.).",
    "–í –Ø–ø–æ–Ω–∏–∏ –∏–≥—Ä–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '–î–∑—è–Ω-–∫—ç–Ω' –∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.",
    "–°—É—â–µ—Å—Ç–≤—É–µ—Ç —á–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞ –ø–æ –∏–≥—Ä–µ '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞' —Å 2002 –≥–æ–¥–∞.",
    "–í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã –∫–∞–º–µ–Ω—å –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤ 80% —Å–ª—É—á–∞–µ–≤, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ –Ω–µ–æ–ø—ã—Ç–Ω—ã–µ.",
    "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ö–æ–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.",
    "–°—É—â–µ—Å—Ç–≤—É—é—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞, —è—â–µ—Ä–∏—Ü–∞, –°–ø–æ–∫'.",
    "–í 2006 –≥–æ–¥—É —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π —Å—É–¥—å—è –°–®–ê –ø—Ä–∏–∫–∞–∑–∞–ª —Ä–µ—à–∏—Ç—å —Å–ø–æ—Ä–Ω—ã–π —Å–ª—É—á–∞–π —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∏–≥—Ä—ã.",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–æ–∫–∞–∑–∞–ª–∏, —á—Ç–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å —Ä–∞–≤–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é.",
    "–í –ú–∞–ª–∞–π–∑–∏–∏ –¥–µ—Ç–∏ –∏–≥—Ä–∞—é—Ç –≤ –≤–µ—Ä—Å–∏—é —Å –∂—É–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–±–µ–∂–¥–∞–µ—Ç –±—É–º–∞–≥—É (–ø–æ—Ç–æ–º—É —á—Ç–æ –µ—Å—Ç –µ—ë), –Ω–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∫–∞–º–Ω—é.",
    "–†–æ–±–æ—Ç—ã –º–æ–≥—É—Ç –æ–±—ã–≥—Ä—ã–≤–∞—Ç—å –ª—é–¥–µ–π –≤ —ç—Ç—É –∏–≥—Ä—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –¥–≤–∏–∂–µ–Ω–∏—è —Ä—É–∫–∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º."
]
main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.row(" –ò–≥—Ä–∞—Ç—å", " –§–∞–∫—Ç")
main_keyboard.row(" –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", " –ü–æ–±–µ–¥—ã", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
game_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
game_keyboard.row(" –ö–∞–º–µ–Ω—å", "‚úå –ù–æ–∂–Ω–∏—Ü—ã", " –ë—É–º–∞–≥–∞")
game_keyboard.row(" –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
mode_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
mode_keyboard.row("–î–æ 1 –ø–æ–±–µ–¥—ã", "–î–æ 3 –ø–æ–±–µ–¥")
mode_keyboard.row(" –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def load_user_data():
    global user_data
    if os.path.exists("user_data.json"):
        with open("user_data.json", "r") as file:
            user_data = json.load(file)
def save_user_data():
    with open("user_data.json", "w") as file:
        json.dump(user_data, file)
def init_user(user_id):
    if str(user_id) not in user_data:
        user_data[str(user_id)] = {
            "games_played": 0,
            "wins": 0,
            "losses": 0,
            "draws": 0,
            "current_streak": 0,
            "max_streak": 0,
            "game_history": [],
            "game_mode": "1",  # 1 –∏–ª–∏ 3
            "current_game": {
                "user_wins": 0,
                "bot_wins": 0,
                "moves": []
            }
        }
def determine_winner(user_choice, bot_choice):
    if user_choice == bot_choice:
        return "draw"
    elif (user_choice == " –ö–∞–º–µ–Ω—å" and bot_choice == " –ù–æ–∂–Ω–∏—Ü—ã") or \
            (user_choice == " –ù–æ–∂–Ω–∏—Ü—ã" and bot_choice == " –ë—É–º–∞–≥–∞") or \
            (user_choice == " –ë—É–º–∞–≥–∞" and bot_choice == " –ö–∞–º–µ–Ω—å"):
        return "user"
    else:
        return "bot"
def get_bot_choice():
    choices = [" –ö–∞–º–µ–Ω—å", " –ù–æ–∂–Ω–∏—Ü—ã", " –ë—É–º–∞–≥–∞"]
    return random.choice(choices)
def update_stats(user_id, result):
    user = user_data[str(user_id)]
    if result == "user":
        user["wins"] += 1
        user["current_streak"] += 1
        if user["current_streak"] > user["max_streak"]:
            user["max_streak"] = user["current_streak"]
    elif result == "bot":
        user["losses"] += 1
        user["current_streak"] = 0
    else:
        user["draws"] += 1
    user["games_played"] += 1
def reset_current_game(user_id):
    user_data[str(user_id)]["current_game"] = {
        "user_wins": 0,
        "bot_wins": 0,
        "moves": []
    }
def get_stats_message(user_id):
    user = user_data[str(user_id)]
    total = user["wins"] + user["losses"] + user["draws"]
    win_rate = (user["wins"] / total * 100) if total > 0 else 0
    return (
        f" –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f" –í—Å–µ–≥–æ –∏–≥—Ä: {total}\n"
        f" –ü–æ–±–µ–¥: {user['wins']}\n"
        f" –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {user['losses']}\n"
        f" –ù–∏—á—å–∏—Ö: {user['draws']}"
    )
def get_wins_stats_message(user_id):
    user = user_data[str(user_id)]
    total = user["wins"] + user["losses"] + user["draws"]
    win_rate = (user["wins"] / total * 100) if total > 0 else 0

    return (
        f" –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥:\n\n"
        f" –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%\n"
        f" –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {user['current_streak']}\n"
        f" –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {user['max_streak']}"
    )
def get_random_fact():
    return random.choice(game_facts)
@bot.message_handler(commands=['start'])
def send_welcome(message):
    init_user(message.from_user.id)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞'.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )
@bot.message_handler(func=lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def main_menu(message):
    init_user(message.from_user.id)
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_keyboard
    )
@bot.message_handler(func=lambda message: message.text == " –ò–≥—Ä–∞—Ç—å")
def play_game(message):
    init_user(message.from_user.id)
    reset_current_game(message.from_user.id)
    user_data[str(message.from_user.id)]["current_game"]["game_mode"] = user_data[str(message.from_user.id)][
        "game_mode"]
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:",
        reply_markup=game_keyboard
    )
@bot.message_handler(func=lambda message: message.text == " –§–∞–∫—Ç")
def show_fact(message):
    fact = get_random_fact()
    bot.send_message(
        message.chat.id,
        f" –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:\n\n{fact}",
        reply_markup=main_keyboard
    )
@bot.message_handler(func=lambda message: message.text == " –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    init_user(message.from_user.id)
    bot.send_message(
        message.chat.id,
        get_stats_message(message.from_user.id),
        reply_markup=main_keyboard
    )
@bot.message_handler(func=lambda message: message.text == " –ü–æ–±–µ–¥—ã")
def show_wins_stats(message):
    init_user(message.from_user.id)
    bot.send_message(
        message.chat.id,
        get_wins_stats_message(message.from_user.id),
        reply_markup=main_keyboard
    )
@bot.message_handler(func=lambda message: message.text == " –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings(message):
    init_user(message.from_user.id)
    current_mode = "–î–æ 1 –ø–æ–±–µ–¥—ã" if user_data[str(message.from_user.id)]["game_mode"] == "1" else "–î–æ 3 –ø–æ–±–µ–¥"
    bot.send_message(
        message.chat.id,
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã: {current_mode}\n–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º:",
        reply_markup=mode_keyboard
    )
@bot.message_handler(func=lambda message: message.text in ["–î–æ 1 –ø–æ–±–µ–¥—ã", "–î–æ 3 –ø–æ–±–µ–¥"])
def set_game_mode(message):
    init_user(message.from_user.id)
    mode = "1" if message.text == "–î–æ 1 –ø–æ–±–µ–¥—ã" else "3"
    user_data[str(message.from_user.id)]["game_mode"] = mode
    bot.send_message(
        message.chat.id,
        f"–†–µ–∂–∏–º –∏–≥—Ä—ã –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {message.text}",
        reply_markup=main_keyboard
    )
    save_user_data()
@bot.message_handler(func=lambda message: message.text in [" –ö–∞–º–µ–Ω—å", " –ù–æ–∂–Ω–∏—Ü—ã", " –ë—É–º–∞–≥–∞"])
def game_move(message):
    user_id = message.from_user.id
    init_user(user_id)
    user = user_data[str(user_id)]
    user_choice = message.text
    bot_choice = get_bot_choice()
    result = determine_winner(user_choice, bot_choice)
    user["current_game"]["moves"].append({
        "user_choice": user_choice,
        "bot_choice": bot_choice,
        "result": result
    })
    if result == "user":
        user["current_game"]["user_wins"] += 1
    elif result == "bot":
        user["current_game"]["bot_wins"] += 1
    target_wins = int(user["game_mode"])
    user_wins = user["current_game"]["user_wins"]
    bot_wins = user["current_game"]["bot_wins"]
    if user_wins >= target_wins or bot_wins >= target_wins:
        if user_wins > bot_wins:
            game_result = "–ü–æ–±–µ–¥–∞!"
            update_stats(user_id, "user")
        else:
            game_result = "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ."
            update_stats(user_id, "bot")
        user["game_history"].append(user["current_game"])
        if len(user["game_history"]) > 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            user["game_history"] = user["game_history"][-10:]
        bot.send_message(
            message.chat.id,
            f"{game_result}\n"
            f"–¢—ã: {user_choice}\n"
            f"–ë–æ—Ç: {bot_choice}\n\n"
            f"–°—á—ë—Ç: {user_wins}-{bot_wins}\n\n"
            f"–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?",
            reply_markup=main_keyboard
        )
        reset_current_game(user_id)
        save_user_data()
    else:
        result_text = {
            "user": "–¢—ã –≤—ã–∏–≥—Ä–∞–ª —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥!",
            "bot": "–ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥.",
            "draw": "–ù–∏—á—å—è!"
        }[result]
        bot.send_message(
            message.chat.id,
            f"{result_text}\n"
            f"–¢—ã: {user_choice}\n"
            f"–ë–æ—Ç: {bot_choice}\n\n"
            f"–°—á—ë—Ç: {user_wins}-{bot_wins}\n"
            f"–ò–≥—Ä–∞ –¥–æ {target_wins} –ø–æ–±–µ–¥.\n\n"
            f"–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥:",
            reply_markup=game_keyboard
        )
load_user_data()
bot.infinity_polling()